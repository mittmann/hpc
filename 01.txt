	Hardware counters are special registers that track events in the processor such as cache misses, branch prediction success rate, instruction count and memory bandwidth. With this data, it's possible to establish a relation between the performance of a program and the architecture it is running on. There are various ways to extract their data, the most common is through the perf command, but there are others. PAPI provides an interface that groups the events in called EventSets. With this it's possible to correlate performance drops with cache misses or memory bandwith, for example, indicating a bottleneck. Intel provides a C++ API called Performance Counter Monitor (PCM). With PCM, the programmer is able to access hardware counter values directly in the code. There are studies that show the possibility to estimate the power used by the processor analyzing a small subset of these hardware counters.	
	OpenMP is an API for multithreading. It allows the programmer to put compiler directives inside the code signaling a section that should be parallelized, with the advantages of being multiplataform and usable on GPGPU. The Message Passing Interface (MPI) is a specification of what a message passing interface should do and how it should be implemented. There are implementations for nearly all HPC platforms and the code is easily portable to any platform that supports MPI. StarPU works like a scheduler that assigns tasks to the multiple processing units available for the user (e.g. GPU and CPU) given that the programmer has written code for that architecture. StarPU can use different scheduling policies that takes into account different metrics to make its decisions, such as performance or power.

